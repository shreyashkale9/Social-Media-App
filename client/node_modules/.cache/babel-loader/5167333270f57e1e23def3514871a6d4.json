{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = compose;\n/**\r\n * Composes single-argument functions from right to left.\r\n *\r\n * @param {...Function} funcs The functions to compose.\r\n * @returns {Function} A function obtained by composing functions from right to\r\n * left. For example, compose(f, g, h) is identical to arg => f(g(h(arg))).\r\n */\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  return function () {\n    if (funcs.length === 0) {\n      return arguments.length <= 0 ? undefined : arguments[0];\n    }\n\n    var last = funcs[funcs.length - 1];\n    var rest = funcs.slice(0, -1);\n    return rest.reduceRight(function (composed, f) {\n      return f(composed);\n    }, last.apply(undefined, arguments));\n  };\n}","map":{"version":3,"sources":["C:/web pro/Social-Media-App/client/node_modules/redux/lib/compose.js"],"names":["exports","__esModule","compose","_len","arguments","length","funcs","Array","_key","undefined","last","rest","slice","reduceRight","composed","f","apply"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,OAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,OAAT,GAAmB;AACjB,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,KAAK,GAAGC,KAAK,CAACJ,IAAD,CAA1C,EAAkDK,IAAI,GAAG,CAA9D,EAAiEA,IAAI,GAAGL,IAAxE,EAA8EK,IAAI,EAAlF,EAAsF;AACpFF,IAAAA,KAAK,CAACE,IAAD,CAAL,GAAcJ,SAAS,CAACI,IAAD,CAAvB;AACD;;AAED,SAAO,YAAY;AACjB,QAAIF,KAAK,CAACD,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAOD,SAAS,CAACC,MAAV,IAAoB,CAApB,GAAwBI,SAAxB,GAAoCL,SAAS,CAAC,CAAD,CAApD;AACD;;AAED,QAAIM,IAAI,GAAGJ,KAAK,CAACA,KAAK,CAACD,MAAN,GAAe,CAAhB,CAAhB;AACA,QAAIM,IAAI,GAAGL,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAX;AAEA,WAAOD,IAAI,CAACE,WAAL,CAAiB,UAAUC,QAAV,EAAoBC,CAApB,EAAuB;AAC7C,aAAOA,CAAC,CAACD,QAAD,CAAR;AACD,KAFM,EAEJJ,IAAI,CAACM,KAAL,CAAWP,SAAX,EAAsBL,SAAtB,CAFI,CAAP;AAGD,GAXD;AAYD","sourcesContent":["\"use strict\";\r\n\r\nexports.__esModule = true;\r\nexports[\"default\"] = compose;\r\n/**\r\n * Composes single-argument functions from right to left.\r\n *\r\n * @param {...Function} funcs The functions to compose.\r\n * @returns {Function} A function obtained by composing functions from right to\r\n * left. For example, compose(f, g, h) is identical to arg => f(g(h(arg))).\r\n */\r\nfunction compose() {\r\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\r\n    funcs[_key] = arguments[_key];\r\n  }\r\n\r\n  return function () {\r\n    if (funcs.length === 0) {\r\n      return arguments.length <= 0 ? undefined : arguments[0];\r\n    }\r\n\r\n    var last = funcs[funcs.length - 1];\r\n    var rest = funcs.slice(0, -1);\r\n\r\n    return rest.reduceRight(function (composed, f) {\r\n      return f(composed);\r\n    }, last.apply(undefined, arguments));\r\n  };\r\n}"]},"metadata":{},"sourceType":"script"}